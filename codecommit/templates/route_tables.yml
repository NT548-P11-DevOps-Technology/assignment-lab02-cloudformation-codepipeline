AWSTemplateFormatVersion: 2010-09-09

Description: >-
  RouteTable: Specifies a route table for the specified VPC. After creating a route table, you can add routes and associate the table with a subnet
  Route: Specify a route in a route table. You must specify either a destination CIDR block or prefix list ID.
  SubnetRouteTableAssociation: Associates a subnet with a route table. The subnet and route table must be in the same VPC. This association causes traffic originating from the subnet to be routed according to the routes in the route table. A route table can be associated with multiple subnets.
  NetworkAcl: Specifies a network ACL for your VPC
  NetworkAclEntry: Specifies an entry, known as a rule, in a network ACL with a rule number you specify. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules.
  SubnetNetworkAclAssociation: Associates a subnet with a network ACL

Parameters:
  VpcId:
    Description: The ID of the VPC
    Type: String
  VpcName:
    Description: The name of the VPC
    Type: String
  PublicSubnet1:
    Description: The ID of the Public Subnet 1
    Type: String
  PublicSubnet2:
    Description: The ID of the Public Subnet 2
    Type: String
  NATGateway1:
    Description: The ID of the NAT Gateway 1
    Type: String
  NATGateway2:
    Description: The ID of the NAT Gateway 2
    Type: String
  PrivateSubnet1:
    Description: The ID of the Private Subnet 1
    Type: String
  PrivateSubnet2:
    Description: The ID of the Private Subnet 2
    Type: String
  InternetGateway:
    Description: The ID of the Internet Gateway
    Type: String

Resources:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref VpcName
              - public-route-table

  PubicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway # The ID of an internet gateway or virtual private gateway attached to your VPC.

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref VpcName
              - public-nacl

  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100" # Rule number to assign to the entry, such as 100. ACL entries are processed in ascending order by rule number. Entries can't use the same rule number unless one is an egress rule and the other is an ingress rule.
      Protocol: "-1" # The IP protocol that the rule applies to. You must specify -1 or a protocol number. You can specify -1 for all protocols.
      RuleAction: allow
      Egress: "false" # Whether this rule applies to egress traffic from the subnet (true) or ingress traffic to the subnet (false). By default, AWS CloudFormation specifies false.
      CidrBlock: 0.0.0.0/0
      PortRange: # The range of port numbers for the UDP/TCP protocol. Required if specifying 6 (TCP) or 17 (UDP) for the protocol parameter.
        From: "0"
        To: "65535"

  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnetNetworkAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref VpcName
              - private-route-table-1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref VpcName
              - private-route-table-2

  PrivateRouteToInternet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1 # [IPv4 traffic only] The ID of a NAT gateway.

  PrivateRouteToInternet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

Outputs:
  PublicRouteTable:
    Description: The ID of the Public Route Table
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PublicRouteTable

  PrivateRouteTable1:
    Description: The ID of the Private Route Table 1
    Value: !Ref PrivateRouteTable1
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PrivateRouteTable1

  PrivateRouteTable2:
    Description: The ID of the Private Route Table 2
    Value: !Ref PrivateRouteTable2
    Export:
      Name: !Sub ${AWS::Region}-${AWS::StackName}-PrivateRouteTable2